import {
  app,
  autoUpdater,
  BrowserView,
  BrowserWindow,
} from 'electron';

import {
  init as initMainToRenderer,
  sendToRenderer,
} from '../inter-process-communication/main-to-renderer';
import log from '../log';
import { View, ViewName } from '../types/views';
import {
  ACTIVATE,
  BEFORE_QUIT,
  BEFORE_QUIT_FOR_UPDATE,
  CLOSE,
  MAIN_WINDOW_ID,
  PLATFORM,
  READY,
  SWITCH_VIEW,
  WINDOW_ALL_CLOSED,
} from '../universal/constants';

import { killAgentProcess, subscribeToAgentEventsFromRenderer } from './agent-handlers';
import './keybindings';
import './menu';
import { setOpenLinksInBrowser } from './open-links';
import { initStore } from './persistence-store';
import { initProxyServer } from './proxy';
import { subscribeToToggleMaximizeWindow } from './screen-size';
import { initUpdater } from './update-electron-app';
import { createAgentView } from './views/agent-view';
import { createLoadmillWebView } from './views/loadmill-web-app-browserview';
import { createProxyView } from './views/proxy-view';
import { subscribeToSwitchView, switchView } from './views/switch-views';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let mainWindow: BrowserWindow;
let forceQuit = false;
const views: View[] = [];

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const onReady = async () => {
  initStore();
  await initProxyServer();
  subscribeToAgentEventsFromRenderer();
  createWindow();
};

const createWindow = () => {
  log.info('creating window');
  mainWindow = new BrowserWindow({
    show: false,
    titleBarStyle: 'hiddenInset',
    trafficLightPosition: { x: 14, y: 15 },
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  initUpdater(unsubscribeToCloseEvent);
  subscribeToCloseEvent(mainWindow);
  mainWindow.maximize();
  initMainToRenderer(mainWindow);
  sendToRenderer({
    data: { mainWindowId: mainWindow.webContents.id },
    type: MAIN_WINDOW_ID,
  });
  setOpenLinksInBrowser(mainWindow.webContents);
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  subscribeToToggleMaximizeWindow(mainWindow);
  const agentView = createAgentView(mainWindow);
  const proxyView = createProxyView(mainWindow);
  const loadmillWebView = createLoadmillWebView(mainWindow);
  setViews(loadmillWebView, proxyView, agentView);
  subscribeToSwitchView(mainWindow, loadmillWebView, proxyView, agentView);
};

app.on(BEFORE_QUIT, () => {
  log.info('App is quitting');
  killAgentProcess();
  forceQuit = true;
});

autoUpdater.on(BEFORE_QUIT_FOR_UPDATE, () => {
  forceQuit = true;
});

app.on(READY, onReady);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on(WINDOW_ALL_CLOSED, () => {
  if (process.platform !== PLATFORM.DARWIN) {
    app.quit();
  }
});

app.on(ACTIVATE, () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  } else if (mainWindow) {
    mainWindow.show();
  }
});

const unsubscribeToCloseEvent = () => {
  mainWindow.removeListener(CLOSE, () => {});
};

const subscribeToCloseEvent = (window: BrowserWindow = mainWindow) => {
  if (window) {
    window.on(CLOSE, (event: Electron.Event) => {
      if (!forceQuit && process.platform === PLATFORM.DARWIN) {
        if (!forceQuit) {
          event.preventDefault();
          window.hide();
        }
      }
    });
  }
};

const setViews = (
  loadmillWebView: BrowserView,
  proxyView: BrowserView,
  agentView: BrowserView,
) => {
  appendView(agentView, ViewName.AGENT);
  appendView(proxyView, ViewName.PROXY);
  appendView(loadmillWebView, ViewName.WEB_PAGE);
};

const appendView = (view: BrowserView, name: ViewName) => {
  views.push({ id: view.webContents.id, name, view });
};

export const switchToAgentView = (): void => {
  const agentView = views.find((view) => view.name === ViewName.AGENT);
  if (agentView) {
    switchView(mainWindow, agentView.view);
    sendToRenderer({
      data: { view: ViewName.AGENT },
      type: SWITCH_VIEW,
    });
  } else {
    log.error('Agent view not found');
  }
};
