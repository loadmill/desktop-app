import {
  app,
  autoUpdater,
  BrowserWindow,
} from 'electron';

import {
  sendFromMainWindowToRenderer,
} from '../inter-process-communication/to-renderer-process/main-to-renderer';
import log from '../log';
import {
  ACTIVATE,
  BEFORE_QUIT,
  BEFORE_QUIT_FOR_UPDATE,
  CLOSE,
  MAIN_WINDOW_ID,
  PLATFORM,
  READY,
  WINDOW_ALL_CLOSED,
} from '../universal/constants';

import { killAgentProcess, subscribeToAgentEventsFromRenderer } from './agent-handlers';
import './deep-link';
import './keybindings';
import {
  getMainWindow,
  setMainWindow,
} from './main-window';
import './menu';
import { setOpenLinksInBrowser } from './open-links';
import { initStore } from './persistence-store';
import { initProxyServer } from './proxy';
import { subscribeToToggleMaximizeWindow } from './screen-size';
import { setProxyOnStartup } from './settings/proxy-server-setting';
import { initUpdater } from './update-electron-app';
import {
  initializeViews,
} from './views';

// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
let forceQuit = false;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const onStartup = () => {
  initStore();
  setProxyOnStartup();
};

onStartup();

const onReady = async () => {
  await initProxyServer();
  subscribeToAgentEventsFromRenderer();
  createWindow();
};

const createWindow = () => {
  log.info('creating window');
  const mainWindow = new BrowserWindow({
    show: false,
    titleBarStyle: 'hiddenInset',
    trafficLightPosition: { x: 14, y: 15 },
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  setMainWindow(mainWindow);
  initUpdater(unsubscribeToCloseEvent);
  subscribeToCloseEvent(mainWindow);
  mainWindow.maximize();
  sendFromMainWindowToRenderer({
    data: { mainWindowId: mainWindow.webContents.id },
    type: MAIN_WINDOW_ID,
  });
  setOpenLinksInBrowser(mainWindow.webContents);
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  subscribeToToggleMaximizeWindow(mainWindow);
  initializeViews(mainWindow);
};

app.on(BEFORE_QUIT, () => {
  log.info('App is quitting');
  killAgentProcess();
  forceQuit = true;
});

autoUpdater.on(BEFORE_QUIT_FOR_UPDATE, () => {
  forceQuit = true;
});

app.on(READY, onReady);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on(WINDOW_ALL_CLOSED, () => {
  if (process.platform !== PLATFORM.DARWIN) {
    app.quit();
  }
});

app.on(ACTIVATE, () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  } else {
    const mainWindow = getMainWindow();
    if (mainWindow) {
      mainWindow.show();
    }
  }
});

const unsubscribeToCloseEvent = () => {
  const mainWindow = getMainWindow();
  if (mainWindow) {
    mainWindow.removeListener(CLOSE, () => { });
  }
};

const subscribeToCloseEvent = (window: BrowserWindow = getMainWindow()) => {
  if (window) {
    window.on(CLOSE, (event: Electron.Event) => {
      if (forceQuit) {
        setMainWindow(null);
      } else if (process.platform === PLATFORM.DARWIN) {
        event.preventDefault();
        window.hide();
      }
    });
  }
};
