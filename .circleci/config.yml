version: 2.1
jobs:
  build_macos:
    macos:
      xcode: "14.1.0"
    steps:
      - checkout
      - run:
          name: create-keychain
          command: security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
      - run:
          name: set-default-keychain
          command: security default-keychain -s build.keychain
      - run:
          name: unlock-keychain
          command: security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
      - run:
          name: create CERT file
          command: echo $KEYSTORE | base64 --decode - > keystore.p12
      - run:
          name: create valid codesign identity
          command: security import keystore.p12 -k build.keychain -P $KEYCHAIN_PASSWORD -A -T /usr/bin/codesign -T /usr/bin/productsign
      - run:
          name: display valid identity created
          command: security find-identity -p codesigning -v
      - run:
          name: verify valid identity created
          command: '[[ $(security find-identity -p codesigning -v) = *"1 valid identities found"* ]]'
      - run:
          name: suppress macOS codesign execution prompt
          command: 'security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain'
      - restore_cache:
          keys:
            - yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-v1-{{ .Branch }}-
            - yarn-packages-v1-
      - run:
          name: install dependencies
          command: yarn install
      - save_cache:
          paths:
            - node_modules/
          key: yarn-packages-v1-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: run tests
          command: yarn lint-and-test
      - when:
          condition:
              not:
                equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: package application
                command: yarn package
            - run:
                name: create distribution files
                command: yarn only-make
            - store_artifacts:
                path: out/make/
            - run:
                name: Fetch Artifacts URLs
                command: |
                  ARTIFACTS_URLS=$(curl -s \
                    --header 'authorization: Basic ${CIRCLECI_API_TOKEN}' \
                    --url "https://circleci.com/api/v2/project/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts" \
                    | python3 -c 'import sys, json; \
                    artifacts = json.load(sys.stdin)["items"]; \
                    print("\\n\\n".join([ "### 1. [üçè .dmg]" + "(" + artifacts[0]["url"] + ")", "### 2. [ü§ê .zip]" + "(" + artifacts[1]["url"] + ")"])); \
                    ')
                  echo "export ARTIFACTS_URLS='${ARTIFACTS_URLS}'" >> $BASH_ENV
            - run:
                name: Post Artifacts URLs to GitHub PR
                command: |
                  COMMENT="## üèó Build Artifacts are available hereüëá \\n\\n${ARTIFACTS_URLS}"
                  PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
                  curl -X POST \
                      -H "Authorization: token ${GITHUB_API_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "{\"body\": \"$COMMENT\"}" \
                      "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: publish release
                command: yarn forge-publish

workflows:
  version: 2
  build:
    jobs:
      - build_macos
