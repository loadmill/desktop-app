version: 2.1

orbs:
  win: circleci/windows@5.0

jobs:
  build_macos:
    macos:
      xcode: "14.1.0"
    resource_class: macos.x86.medium.gen2
    steps:
      - checkout
      - run:
          name: create-keychain
          command: security create-keychain -p $KEYCHAIN_PASSWORD build.keychain
      - run:
          name: set-default-keychain
          command: security default-keychain -s build.keychain
      - run:
          name: unlock-keychain
          command: security unlock-keychain -p $KEYCHAIN_PASSWORD build.keychain
      - run:
          name: create CERT file
          command: echo $KEYSTORE | base64 --decode - > keystore.p12
      - run:
          name: create valid codesign identity
          command: security import keystore.p12 -k build.keychain -P $KEYCHAIN_PASSWORD -A -T /usr/bin/codesign -T /usr/bin/productsign
      - run:
          name: display valid identity created
          command: security find-identity -p codesigning -v
      - run:
          name: verify valid identity created
          command: '[[ $(security find-identity -p codesigning -v) = *"1 valid identities found"* ]]'
      - run:
          name: suppress macOS codesign execution prompt
          command: 'security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $KEYCHAIN_PASSWORD build.keychain'
      - restore_cache:
          keys:
            - yarn-packages-macos-build-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-macos-build-{{ .Branch }}-
            - yarn-packages-macos-build-
      - run:
          name: install dependencies
          command: yarn install
      - save_cache:
          paths:
            - node_modules/
          key: yarn-packages-macos-build-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: run tests
          command: yarn lint-and-test
      - when:
          condition:
              not:
                equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: package application
                command: yarn package
            - run:
                name: create distribution files
                command: yarn only-make
            - store_artifacts:
                path: out/make/
            - run:
                name: Fetch Artifacts URLs
                command: |
                  ARTIFACTS_URLS=$(curl -s \
                    --header 'authorization: Basic ${CIRCLECI_API_TOKEN}' \
                    --url "https://circleci.com/api/v2/project/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts" \
                    | python3 -c 'import sys, json; \
                    artifacts = json.load(sys.stdin)["items"]; \
                    print("\\n\\n".join([ "### 1. [üçè .dmg]" + "(" + artifacts[0]["url"] + ")", "### 2. [ü§ê .zip]" + "(" + artifacts[1]["url"] + ")"])); \
                    ')
                  echo "export ARTIFACTS_URLS='${ARTIFACTS_URLS}'" >> $BASH_ENV
            - run:
                name: Post Artifacts URLs to GitHub PR
                command: |
                  COMMENT="## üèó Build Artifacts are available hereüëá \\n\\n${ARTIFACTS_URLS}"
                  PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
                  curl -X POST \
                      -H "Authorization: token ${GITHUB_API_TOKEN}" \
                      -H "Content-Type: application/json" \
                      -d "{\"body\": \"$COMMENT\"}" \
                      "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: publish release
                command: yarn forge-publish
  build_windows:
    executor:
      name: win/server-2022
      shell: bash.exe
    steps:
      - checkout
      - run:
          name: Code Sign Setup - Create pfx file
          command: |
            # create cert.p12 file
            echo ${KEYSTORE} | base64 --decode > cert.p12

            # create pem files
            openssl pkcs12 -in cert.p12 -legacy -out crt.pem -clcerts -nokeys -passin pass:${KEYCHAIN_PASSWORD}
            openssl pkcs12 -in cert.p12 -legacy -out key.pem -nocerts -nodes -passin pass:${KEYCHAIN_PASSWORD}

            # create a pfx file
            openssl pkcs12 -export -out cert.pfx -inkey key.pem -in crt.pem -passout pass:${KEYCHAIN_PASSWORD}

            # print out the certificate
            openssl pkcs12 -info -in cert.pfx -passin pass:${KEYCHAIN_PASSWORD} -passout pass:${KEYCHAIN_PASSWORD} -nokeys
      - run:
          name: Install Node 14.18.0
          command: nvm install 14.18.0 && nvm use 14.18.0
      - run:
          name: Install Yarn
          command: npm install -g yarn
      - restore_cache:
          keys:
            - yarn-packages-windows-build-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - yarn-packages-windows-build-{{ .Branch }}-
            - yarn-packages-windows-build-
      - run:
          name: Install dependencies
          command: yarn install
      - save_cache:
          paths:
            - node_modules/
          key: yarn-packages-windows-build-{{ .Branch }}-{{ checksum "yarn.lock" }}
      - run:
          name: Run Tests
          command: yarn test
      - run:
          name: Package Application
          command: CERTIFICATE_PASSWORD=$KEYCHAIN_PASSWORD yarn package
      - run:
          name: Create distribution files
          command: yarn only-make
      - store_artifacts:
          name: Store Artifacts
          path: out/make/
      - run:
          name: Fetch Artifacts Metadata (Urls and paths)
          command: |
            ARTIFACTS=$(\
              curl --fail-with-body -L \
              --url "https://circleci.com/api/v2/project/gh/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/$CIRCLE_BUILD_NUM/artifacts" \
              -H "Accept: application/json" \
              -u "$CIRCLE_API_TOKEN:")

            echo $ARTIFACTS | jq .
            echo "export ARTIFACTS='${ARTIFACTS}'" >> $BASH_ENV
      - when:
          condition:
              not:
                equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Construct Artifacts URLs
                command: |
                  WINDOWS_INSTALLER_URL=$(echo $ARTIFACTS | jq -e -r '.items[] | select(.url | endswith(".exe")) | .url')
                  WINDOWS_ZIP_URL=$(echo $ARTIFACTS | jq -e -r '.items[] | select(.url | endswith(".zip")) | .url')
                  echo $WINDOWS_INSTALLER_URL
                  echo $WINDOWS_ZIP_URL
                  echo "export WINDOWS_INSTALLER_URL='${WINDOWS_INSTALLER_URL}'" >> $BASH_ENV
                  echo "export WINDOWS_ZIP_URL='${WINDOWS_ZIP_URL}'" >> $BASH_ENV
            - run:
                name: Post Artifacts URLs to GitHub PR
                command: |
                  COMMENT="Windows Build: 1. [Setup.exe](${WINDOWS_INSTALLER_URL}) 2. [.zip](${WINDOWS_ZIP_URL})"
                  echo $COMMENT
                  PR_NUMBER=${CIRCLE_PULL_REQUEST##*/}
                  echo $PR_NUMBER
                  echo "https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments"
                  curl --fail-with-body -L \
                    -X POST \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer ${GITHUB_API_TOKEN}"\
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    -d "{\"body\": \"$COMMENT\"}" \
                    https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/issues/$PR_NUMBER/comments
      - when:
          condition:
            equal: [ main, << pipeline.git.branch >> ]
          steps:
            - run:
                name: Construct Artifacts Paths
                command: |
                  WINDOWS_INSTALLER_PATH=$(echo $ARTIFACTS | jq -e -r '.items[] | select(.path | endswith(".exe")) | .path')
                  echo $WINDOWS_INSTALLER_PATH
                  echo "export WINDOWS_INSTALLER_PATH='${WINDOWS_INSTALLER_PATH}'" >> $BASH_ENV

                  WINDOWS_ZIP_PATH=$(echo $ARTIFACTS | jq -e -r '.items[] | select(.path | endswith(".zip")) | .path')
                  echo $WINDOWS_ZIP_PATH
                  echo "export WINDOWS_ZIP_PATH='${WINDOWS_ZIP_PATH}'" >> $BASH_ENV

                  WINDOWS_NUPKG_PATH=$(echo $ARTIFACTS | jq -e -r '.items[] | select(.path | endswith(".nupkg")) | .path')
                  echo $WINDOWS_NUPKG_PATH
                  echo "export WINDOWS_NUPKG_PATH='${WINDOWS_NUPKG_PATH}'" >> $BASH_ENV

                  WINDOWS_RELEASES_PATH=$(echo $ARTIFACTS | jq -e -r '.items[] | select(.path | endswith("RELEASES")) | .path')
                  echo $WINDOWS_RELEASES_PATH
                  echo "export WINDOWS_RELEASES_PATH='${WINDOWS_RELEASES_PATH}'" >> $BASH_ENV
            - run:
                name: Construct Artifacts File Names
                command: |
                  WINDOWS_INSTALLER_FILE_NAME=$(basename $WINDOWS_INSTALLER_PATH)
                  echo $WINDOWS_INSTALLER_FILE_NAME
                  echo "export WINDOWS_INSTALLER_FILE_NAME='${WINDOWS_INSTALLER_FILE_NAME}'" >> $BASH_ENV

                  WINDOWS_ZIP_FILE_NAME=$(basename $WINDOWS_ZIP_PATH)
                  echo $WINDOWS_ZIP_FILE_NAME
                  echo "export WINDOWS_ZIP_FILE_NAME='${WINDOWS_ZIP_FILE_NAME}'" >> $BASH_ENV

                  WINDOWS_NUPKG_FILE_NAME=$(basename $WINDOWS_NUPKG_PATH)
                  echo $WINDOWS_NUPKG_FILE_NAME
                  echo "export WINDOWS_NUPKG_FILE_NAME='${WINDOWS_NUPKG_FILE_NAME}'" >> $BASH_ENV

                  WINDOWS_RELEASES_FILE_NAME=$(basename $WINDOWS_RELEASES_PATH)
                  echo $WINDOWS_RELEASES_FILE_NAME
                  echo "export WINDOWS_RELEASES_FILE_NAME='${WINDOWS_RELEASES_FILE_NAME}'" >> $BASH_ENV
            - run:
                name: Fetch the latest release on GitHub
                command: |
                  LATEST_RELEASE_URL="https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/latest"
                  echo "LATEST_RELEASE_URL $LATEST_RELEASE_URL"
                  LATEST_RELEASE_RESPONSE=$(curl --fail-with-body -L \
                    -H "Accept: application/vnd.github+json" \
                    -H "Authorization: Bearer $GITHUB_API_TOKEN"\
                    -H "X-GitHub-Api-Version: 2022-11-28" \
                    "$LATEST_RELEASE_URL")
                  echo "LATEST_RELEASE_RESPONSE"
                  echo "$LATEST_RELEASE_RESPONSE" | jq .
                  echo "export LATEST_RELEASE_RESPONSE='${LATEST_RELEASE_RESPONSE}'" >> $BASH_ENV
            - run:
                name: Extract the release id
                command: |
                  RELEASE_ID=$(echo "$LATEST_RELEASE_RESPONSE" | jq -e -r '.id')
                  echo "RELEASE_ID $RELEASE_ID"
                  echo "export RELEASE_ID='${RELEASE_ID}'" >> $BASH_ENV
            - run:
                name: Upload the Installer artifact/asset to the release
                command: |
                  UPLOAD_URL="https://uploads.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/$RELEASE_ID/assets?name=$WINDOWS_INSTALLER_FILE_NAME"
                  echo "UPLOAD_URL $UPLOAD_URL"
                  UPLOAD_ASSET_RESPONSE=$(\
                    curl --fail-with-body -L \
                      -H "Authorization: Bearer $GITHUB_API_TOKEN" \
                      -H "Content-Type: $(file -b --mime-type $WINDOWS_INSTALLER_PATH)" \
                      --data-binary @$WINDOWS_INSTALLER_PATH \
                      "$UPLOAD_URL"
                  )
                  echo "UPLOAD_ASSET_RESPONSE"
                  echo "$UPLOAD_ASSET_RESPONSE" | jq .
            - run:
                name: Upload the Zip artifact/asset to the release
                command: |
                  UPLOAD_URL="https://uploads.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/$RELEASE_ID/assets?name=$WINDOWS_ZIP_FILE_NAME"
                  echo "UPLOAD_URL $UPLOAD_URL"
                  UPLOAD_ASSET_RESPONSE=$(\
                    curl --fail-with-body -L \
                      -H "Authorization: Bearer $GITHUB_API_TOKEN" \
                      -H "Content-Type: $(file -b --mime-type $WINDOWS_ZIP_PATH)" \
                      --data-binary @$WINDOWS_ZIP_PATH \
                      "$UPLOAD_URL"
                  )
                  echo "UPLOAD_ASSET_RESPONSE"
                  echo "$UPLOAD_ASSET_RESPONSE" | jq .
            - run:
                name: Upload the NuPkg artifact/asset to the release
                command: |
                  UPLOAD_URL="https://uploads.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/$RELEASE_ID/assets?name=$WINDOWS_NUPKG_FILE_NAME"
                  echo "UPLOAD_URL $UPLOAD_URL"
                  UPLOAD_ASSET_RESPONSE=$(\
                    curl --fail-with-body -L \
                      -H "Authorization: Bearer $GITHUB_API_TOKEN" \
                      -H "Content-Type: $(file -b --mime-type $WINDOWS_NUPKG_PATH)" \
                      --data-binary @$WINDOWS_NUPKG_PATH \
                      "$UPLOAD_URL"
                  )
                  echo "UPLOAD_ASSET_RESPONSE"
                  echo "$UPLOAD_ASSET_RESPONSE" | jq .
            - run:
                name: Upload the RELEASES artifact/asset to the release
                command: |
                  UPLOAD_URL="https://uploads.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/releases/$RELEASE_ID/assets?name=$WINDOWS_RELEASES_FILE_NAME"
                  echo "UPLOAD_URL $UPLOAD_URL"
                  UPLOAD_ASSET_RESPONSE=$(\
                    curl --fail-with-body -L \
                      -H "Authorization: Bearer $GITHUB_API_TOKEN" \
                      -H "Content-Type: $(file -b --mime-type $WINDOWS_RELEASES_PATH)" \
                      --data-binary @$WINDOWS_RELEASES_PATH \
                      "$UPLOAD_URL"
                  )
                  echo "UPLOAD_ASSET_RESPONSE"
                  echo "$UPLOAD_ASSET_RESPONSE" | jq .

workflows:
  version: 2
  build:
    jobs:
      - build_macos
      - build_windows:
          requires:
            - build_macos
